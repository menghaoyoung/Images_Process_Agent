1. Modify the program to read input images, use cv2 to read all images with the "Poly_" prefix from a specified folder (supporting PNG/JPG formats), perform CLAHE enhancement on all images (clipLimit=3, tileGridSize=(10, 10)), save the CLAHE-enhanced images to a specified path, and then process the CLAHE-enhanced images using the PIL library (Pillow), Convert images to grayscale and extract pixel grayscale values. Identify GAP pixels defined as: (1) Grayscale value between 1–150 (inclusive) (2) At least one adjacent pixel (up/down/left/right) has 25 contiguous pixels meeting the grayscale condition.
Generate a per-pixel CSV file containing: Coordinates (row, column), Grayscale value, GAP flag (0 or 1). For example, the program should be runnable with a command like python py1.py . Generate two output files per image:
​CSV file: Stores all pixel analysis data, naming: {original_image_name}_gap_analysis.csv
​new images: Generate a new PNG image for each input image, highlighting points with GAP flag = 1 in black (RGB: 0, 0, 0),  highlighting points with GAP flag = 0 in white (RGB: 255, 255, 255).
Only modify the program and save it as py1.py, do not execute it in this step.
2. Then, run py1.py. Run py1.py in the background, and verify if the output new images and CSV files exist. If they exist, print "Calculation successful".
3. Utilize Python to generate a Word document and write a detailed simulation report (500 words) based on the generated graphs and provided instructions. Choose a suitable title and divide the report into four sections: begin with an Abstract, followed by an "Introduction" section briefly describing purpose and background, a "Methods" section discussing programming approaches, and a "Results" section presenting findings and showing all the new images.

[input images path]:  specified folder = " "

[Python Program framework]:
import os
import csv
import cv2
from PIL import Image
import numpy as np
from collections import defaultdict
import time

# clahe = cv2.createCLAHE(clipLimit=3, tileGridSize=(8, 8))
def enhance_spot_image():

# Check whether the pixel points meet the GAP condition：(1) Grayscale value between 1–155 (inclusive) (2) At least one adjacent pixel (up/down/left/right) has 25 contiguous pixels meeting the grayscale condition.
def check_gap_conditions():

# Process all images in the directory whose filenames start with "Poly_"
def process_images():

# Generate a new PNG image for each input image, highlighting points with GAP flag = 1 in black (RGB: 0, 0, 0),  highlighting points with GAP flag = 0 in white (RGB: 255, 255, 255).
def process_new_images():

# Stores all pixel analysis data, naming: {original_image_name}_gap_analysis.csv
def save_csv():

if __name__ == "__main__":
    input_directory = " "
    process_images(input_directory)
    print("Proceed all the images！")
[END of python program]

[Files output path]: " "